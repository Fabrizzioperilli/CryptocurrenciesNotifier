@startuml
class org.ull.dap.app.models.entities.Data {
- String id
- int rank
- String symbol
- String name
- double supply
- double maxSupply
- double marketCapUsd
- double volumeUsd24Hr
- double priceUsd
- double changePercent24Hr
- double vwap24Hr
- String explorer
+ String getId()
+ void setId(String)
+ int getRank()
+ void setRank(int)
+ String getSymbol()
+ void setSymbol(String)
+ String getName()
+ void setName(String)
+ double getSupply()
+ void setSupply(double)
+ double getMaxSupply()
+ void setMaxSupply(double)
+ double getMarketCapUsd()
+ void setMarketCapUsd(double)
+ double getVolumeUsd24Hr()
+ void setVolumeUsd24Hr(double)
+ double getPriceUsd()
+ void setPriceUsd(double)
+ double getChangePercent24Hr()
+ void setChangePercent24Hr(double)
+ double getVwap24Hr()
+ void setVwap24Hr(double)
+ String getExplorer()
+ void setExplorer(String)
+ String toString()
}
class org.ull.dap.app.models.connections.api.CryptocurrencyAPI {
- String URI_API
+ HttpRequest buildHttpRequest(String)
+ HttpResponse<String> sendHttpRequest(HttpRequest)
+ Asset getAssetData(String)
+ String getUriAPI()
}
class org.ull.dap.app.models.connections.csv.CryptoParser {
# Object convert(String,String)
}
class org.ull.dap.app.models.entities.Asset {
- Data data
- String timestamp
+ Data getData()
+ void setData(Data)
+ String getTimestamp()
+ void setTimestamp(String)
+ String toString()
}
class org.ull.dap.app.models.connections.csv.CSVReader {
- String header
- String url
- List<String> records
+ String getHeader()
+ List<String> getRecords()
+ void partialPrint(int)
+ String getUrl()
}
class org.ull.dap.app.models.notifiers.CryptocurrencyNotifier {
- List<IObserver> observers
- IConnectionAPI connectionAPI
- List<String> namesCryptocurrencies
- List<Asset> assets
- {static} String CSV_CRYPTOS_PATH
- Map<String,String> cryptoNameImage
+ void subscribe(IObserver)
+ void unsubscribe(IObserver)
+ List<IObserver> getObservers()
+ void notifyObservers()
+ List<Asset> getAssets()
+ List<String> getNamesCryptocurrencies()
+ IConnectionAPI getConnectionAPI()
+ Map<String,String> getCryptoNameImage()
}
interface org.ull.dap.app.models.notifiers.Observable {
~ void subscribe(IObserver)
~ void unsubscribe(IObserver)
~ void notifyObservers()
}
class org.ull.dap.app.models.connections.csv.HttpFileDownloader {
- {static} int BUFFER_SIZE
+ {static} String downloadFromURL(String)
}
abstract class org.ull.dap.app.models.connections.csv.Parser {
- List<List<Object>> data
- String[] header
# {abstract}Object convert(String,String)
+ List<List<Object>> getData()
+ String[] getHeader()
}
class org.ull.dap.app.models.users.User {
- String name
- long id
- List<String> nameCryptos
- Map<String,Double> cryptoPrices
- List<String> messagesToNotify
+ void update(Asset)
+ List<String> getNameCryptos()
+ Map<String,Double> getCryptoPrices()
+ void addCrypto(String)
+ void deleteCrypto(String)
+ String toString()
+ int hashCode()
+ String getName()
+ List<String> getMessagesToNotify()
+ void setName(String)
+ long getId()
+ void setId(long)
+ void setNameCryptos(List<String>)
+ void setCryptoPrices(Map<String,Double>)
+ void setMessagesToNotify(List<String>)
}
interface org.ull.dap.app.models.users.IObserver {
~ void update(Asset)
~ void addCrypto(String)
~ void deleteCrypto(String)
~ List<String> getNameCryptos()
~ List<String> getMessagesToNotify()
~ String getName()
}
interface org.ull.dap.app.models.connections.api.IConnectionAPI {
~ HttpRequest buildHttpRequest(String)
~ HttpResponse<String> sendHttpRequest(HttpRequest)
~ Asset getAssetData(String)
}


org.ull.dap.app.models.connections.api.IConnectionAPI <|.. org.ull.dap.app.models.connections.api.CryptocurrencyAPI
org.ull.dap.app.models.connections.csv.Parser <|-- org.ull.dap.app.models.connections.csv.CryptoParser
org.ull.dap.app.models.notifiers.Observable <|.. org.ull.dap.app.models.notifiers.CryptocurrencyNotifier
org.ull.dap.app.models.users.IObserver <|.. org.ull.dap.app.models.users.User
@enduml